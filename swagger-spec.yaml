openapi: 3.0.0
paths:
  /items:
    get:
      operationId: ItemsController_findAll
      summary: find all items
      parameters: []
      responses:
        '200':
          description: ''
      tags: &ref_0
        - items
    post:
      operationId: ItemsController_create
      summary: create item
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemDto'
      responses:
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      tags: *ref_0
      security:
        - bearer: []
  /items/{id}:
    get:
      operationId: ItemsController_findById
      summary: find by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '404':
          description: Not Found.
      tags: *ref_0
    patch:
      operationId: ItemsController_updateStatus
      summary: update status of item
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized.
      tags: *ref_0
      security:
        - bearer: []
    delete:
      operationId: ItemsController_delete
      summary: delete item
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized.
      tags: *ref_0
      security:
        - bearer: []
  /auth/signup0:
    post:
      operationId: AuthController_signUp
      summary: signup
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
      tags: &ref_1
        - auth
  /auth/signin:
    post:
      operationId: AuthController_signIn
      summary: signin and return with JWT
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDto'
      responses:
        '200':
          description: signin completed.
        '401':
          description: Unauthorized.
      tags: *ref_1
  /auth/users:
    get:
      operationId: AuthController_users
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_1
      security:
        - bearer: []
  /auth/signup:
    post:
      operationId: AuthController_signup
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSignUpDto'
      responses:
        '201':
          description: ''
      tags: *ref_1
      security:
        - bearer: []
  /auth/{id}:
    delete:
      operationId: AuthController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_1
      security:
        - bearer: []
  /auth/{id}/change-role:
    put:
      operationId: AuthController_changeRole
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestChangeRoleDto'
      responses:
        '200':
          description: ''
      tags: *ref_1
      security:
        - bearer: []
  /auth/change-password:
    put:
      operationId: AuthController_changePassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestChangePasswordDto'
      responses:
        '200':
          description: ''
      tags: *ref_1
      security:
        - bearer: []
  /json-key:
    get:
      operationId: JsonKeyController_get
      summary: jsonキー取得
      parameters: []
      responses:
        '200':
          description: ''
      security:
        - bearer: []
  /json-key/changeAll:
    post:
      operationId: JsonKeyController_changeAll
      summary: jsonキー全更新
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TestJsonKeyDto'
      responses:
        '201':
          description: ''
      security:
        - bearer: []
  /search-history:
    get:
      operationId: SearchHistoryController_get
      parameters: []
      responses:
        '200':
          description: ''
      security: &ref_2
        - bearer: []
  /search-history/create:
    post:
      operationId: SearchHistoryController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSearchHistoryDto'
      responses:
        '201':
          description: ''
      security: *ref_2
  /search-history/{id}:
    delete:
      operationId: SearchHistoryController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      security: *ref_2
  /logsearch/search:
    get:
      operationId: LogtblsController_findAll
      summary: find all
      parameters: []
      responses:
        '200':
          description: The found record
        '403':
          description: Forbidden.
      tags:
        - logsearch
      security:
        - bearer: []
info:
  title: Flea Market
  description: Flea Market Application Endpoint API description
  version: '1.0'
  contact: {}
tags:
  - name: logtbls
    description: ''
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    CreateItemDto:
      type: object
      properties:
        name:
          type: string
          example: IZONEスマフォケース
          description: Product name.
        price:
          type: number
          example: '1200'
          description: Price.
        description:
          type: string
          example: IZONE special edition smartphone case for WIZONE of world.
          description: Description of product.
      required:
        - name
        - price
        - description
    CreateUserDto:
      type: object
      properties:
        username:
          type: string
          example: shibuya
          description: User name for login.
        password:
          type: string
          example: password
          description: Password for login.
        status:
          type: string
          example: FREE
          description: User class status (FREE or PREMIUM).
      required:
        - username
        - password
        - status
    CredentialsDto:
      type: object
      properties:
        username:
          type: string
          example: shibuya
          description: User name for authentication.
        password:
          type: string
          example: password
          description: Password for authentication.
      required:
        - username
        - password
    TestSignUpDto:
      type: object
      properties: {}
    TestChangeRoleDto:
      type: object
      properties: {}
    TestChangePasswordDto:
      type: object
      properties: {}
    TestJsonKeyDto:
      type: object
      properties: {}
    TestSearchHistoryDto:
      type: object
      properties: {}
